// Generated by CoffeeScript 1.10.0
(function() {
  var obj_to_arr,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  obj_to_arr = function(obj) {
    var ar, key, value;
    ar = [];
    for (key in obj) {
      value = obj[key];
      ar.push(value);
    }
    return ar;
  };

  window.Map = (function() {
    function Map(map_div) {
      var four_way, key, options, pois_settings, settings, style, value;
      this.map_div = map_div;
      this._wkt_shapes = {};
      this._overlay_layers = [];
      this._poi_layers = {};
      this._poi_select_feature;
      this._ol_map;
      options = {
        div: this.map_div,
        projection: new OpenLayers.Projection('EPSG:900913'),
        displayProjection: new OpenLayers.Projection('EPSG:4326'),
        autoUpdateSize: false,
        zoomOffset: 5,
        controls: [
          new OpenLayers.Control.MousePosition(), new OpenLayers.Control.Attribution(), new OpenLayers.Control.TouchNavigation({
            dragPanOptions: {
              enableKinetic: true
            }
          })
        ],
        layers: [
          new OpenLayers.Layer.OSM('OpenStreetMap', ["https:///a.tile.openstreetmap.org/${z}/${x}/${y}.png", "https://b.tile.openstreetmap.org/${z}/${x}/${y}.png", "https://c.tile.openstreetmap.org/${z}/${x}/${y}.png"], {}), new OpenLayers.Layer.Bing({
            key: window.Config.BING_API_KEY,
            type: 'Road',
            name: 'Bing Strasse'
          }), new OpenLayers.Layer.Bing({
            key: window.Config.BING_API_KEY,
            type: 'Aerial',
            name: 'Bing Luftbilder'
          }), new OpenLayers.Layer.Bing({
            key: window.Config.BING_API_KEY,
            type: 'AerialWithLabels',
            name: 'Bing Luftbilder + Strassen'
          })
        ]
      };
      this._ol_map = new OpenLayers.Map(options);
      style = {
        strokeWidth: 4,
        strokeColor: '#03C',
        fillColor: '#95B0D0',
        fillOpacity: 0.0
      };
      for (key in style) {
        value = style[key];
        OpenLayers.Feature.Vector.style["default"][key] = value;
      }
      jQuery("#" + this.map_div).before("<div class=\"mapDialog modal modal-centered\" id=\"" + this.map_div + "_marker_info\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\">POI</h5>\n                <button\n                    type=\"button\"\n                    class=\"close\"\n                    data-dismiss=\"modal\"\n                    aria-label=\"Close\"\n                >\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <div class=\"modal-body\">\n                <div class=\"markerTable\"></div>\n            </div>\n            <div class=\"modal-footer\">\n                <button\n                    type=\"button\"\n                    class=\"btn btn-inverse\"\n                    data-dismiss=\"modal\"\n                >\n                    Schließen\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"MapButtons\">\n    <button\n        class=\"btn btn-info\"\n        type=\"button\"\n        data-toggle=\"popover\"\n        data-animation=\"false\"\n        data-placement=\"bottom\"\n        data-content=\"<div id='" + this.map_div + "_map_settings_list'></div>\"\n        data-html=\"true\"\n        id=\"" + this.map_div + "_settings\"\n    >\n        <i class=\"fas fa-cogs\"></i>\n        Einstellungen\n    </button>\n    <button\n        class=\"pois-settings btn btn-primary\"\n        type=\"button\"\n        data-toggle=\"popover\"\n        data-animation=\"false\"\n        data-placement=\"bottom\"\n        data-html=\"true\"\n        data-content=\"<div id='" + this.map_div + "_pois_settings_list'></div>\"\n        id=\"" + this.map_div + "_pois_settings\"\n    >\n        <i class=\"fas fa-thumbtack\"></i>\n        Punkte\n    </button>\n\n    <br>\n\n    <div class=\"ZoomButtons\">\n            <button\n                id=\"" + this.map_div + "_zoom_in\"\n                class=\"ZoomInButton btn btn-inverse\"\n            >\n                <i class=\"fas fa-plus\"></i>\n            </button>\n            <button\n                id=\"" + this.map_div + "_zoom_out\"\n                class=\"ZoomOutButton btn btn-inverse\"\n            >\n                <i class=\"fas fa-minus\"></i>\n            </button>\n    </div>\n    <div id =\"" + this.map_div + "_map_move\" class=\"MapMove\">\n        <button class=\"north\" title=\"nach Norden\"></button>\n        <button class=\"east\" title=\"nach Osten\"></button>\n        <button class=\"south\" title=\"nach Süden\"></button>\n        <button class=\"west\" title=\"nach Westen\"></button>\n    </div>\n</div>");
      settings = jQuery("#" + this.map_div + "_settings");
      pois_settings = jQuery("#" + this.map_div + "_pois_settings");
      settings.popover();
      settings.on('show.bs.popover', (function(_this) {
        return function() {
          if (pois_settings.next('.popover').length > 0) {
            pois_settings.click();
          }
        };
      })(this)).on('shown.bs.popover', (function(_this) {
        return function() {
          var popover;
          popover = settings.next('.popover');
          _this._showMapSettings();
          _this._moveObjRelToMap(popover, settings.position().left + 10, 0);
          popover.css('top', settings.position().top + 40);
        };
      })(this));
      pois_settings.popover();
      pois_settings.on('show.bs.popover', (function(_this) {
        return function() {
          if (settings.next('.popover').length > 0) {
            settings.click();
          }
        };
      })(this));
      pois_settings.on('shown.bs.popover', (function(_this) {
        return function() {
          var popover;
          popover = pois_settings.next('.popover');
          _this._showPoisSettings();
          _this._moveObjRelToMap(popover, pois_settings.position().left + 10, 0);
          popover.css('top', pois_settings.position().top + 40);
        };
      })(this));
      jQuery("#" + this.map_div + "_zoom_in").click((function(_this) {
        return function() {
          _this._ol_map.zoomIn();
        };
      })(this));
      jQuery("#" + this.map_div + "_zoom_out").click((function(_this) {
        return function() {
          _this._ol_map.zoomOut();
        };
      })(this));
      four_way = jQuery("#" + this.map_div + "_map_move button").click((function(_this) {
        return function() {
          return _this._moveMap(jQuery(this).attr('class'));
        };
      })(this));
      jQuery(document).bind('typesChanged', (function(_this) {
        return function(e) {
          var display, layer, ref, type;
          ref = _this._poi_layers;
          for (type in ref) {
            layer = ref[type];
            display = ("" + type) === '-1' || indexOf.call(e.types, type) >= 0;
            layer.setVisibility(display);
            if (pois_settings.next('.popover').length > 0) {
              _this._showPoisSettings();
            }
          }
        };
      })(this));
    }

    Map.prototype.addShapes = function(title, shapes) {
      var feature, j, len, shape, vector, wkt;
      jQuery.extend(this._wkt_shapes, shapes);
      vector = new OpenLayers.Layer.Vector(title);
      this._ol_map.addLayer(vector);
      for (j = 0, len = shapes.length; j < len; j++) {
        shape = shapes[j];
        wkt = new OpenLayers.Format.WKT();
        feature = wkt.read(shape);
        feature.geometry.transform(this._ol_map.displayProjection, this._ol_map.getProjectionObject());
        vector.addFeatures(feature);
      }
      this._overlay_layers.push(vector);
      return vector;
    };

    Map.prototype.zoomToExtent = function(layer) {
      return this._ol_map.zoomToExtent(layer.getDataExtent());
    };

    Map.prototype.setCenter = function(lon, lat, zoom, dragging, forceZoomChange) {
      var lonlat;
      lonlat = new OpenLayers.LonLat(lon, lat).transform(this._ol_map.displayProjection, this._ol_map.projection);
      return this._ol_map.setCenter(lonlat, zoom, dragging, forceZoomChange);
    };

    Map.prototype.updateSize = function() {
      return this._ol_map.updateSize();
    };

    Map.prototype.removeLayer = function(layer) {
      var i, j, l, len, ref, ref1;
      ref = this._poi_layers;
      for (i in ref) {
        l = ref[i];
        if (l === layer) {
          delete this._poi_layers[i];
        }
      }
      ref1 = this._overlay_layers;
      for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        l = ref1[i];
        if (l === layer) {
          this._overlay_layers.splice(i, 1);
        }
      }
      if (this._poi_select_feature) {
        this._poi_select_feature.setLayer(obj_to_arr(this._poi_layers));
      }
      return this._ol_map.removeLayer(layer);
    };

    Map.prototype.dragVector = function(layer, callback) {
      var drag, options;
      options = {
        'onDrag': (function(_this) {
          return function(feature, pixel) {
            var lonlat;
            lonlat = new OpenLayers.LonLat(feature.geometry.x, feature.geometry.y).transform(_this._ol_map.projection, _this._ol_map.displayProjection);
            callback(lonlat.lon, lonlat.lat);
          };
        })(this)
      };
      drag = new OpenLayers.Control.DragFeature(layer, options);
      this._ol_map.addControl(drag);
      return drag.activate();
    };

    Map.prototype.moveFeatureInVector = function(layer, lon, lat) {
      var feature, j, len, lonlat, ref, results;
      ref = layer.features;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        feature = ref[j];
        lonlat = new OpenLayers.LonLat(lon, lat).transform(this._ol_map.displayProjection, this._ol_map.projection);
        results.push(feature.move(lonlat));
      }
      return results;
    };

    Map.prototype.addMarker = function(title, lon, lat, icon_url, icon_width, icon_height) {
      var layer, marker;
      if (icon_width == null) {
        icon_width = 32;
      }
      if (icon_height == null) {
        icon_height = 37;
      }
      layer = new OpenLayers.Layer.Vector(title);
      this._ol_map.addLayer(layer);
      marker = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(lon, lat).transform(this._ol_map.displayProjection, this._ol_map.projection), {}, {
        externalGraphic: icon_url,
        graphicHeight: icon_height,
        graphicWidth: icon_width
      });
      layer.addFeatures(marker);
      this._overlay_layers.push(layer);
      return layer;
    };

    Map.prototype.addPois = function(title, pois_url, poi_type_id, icon_url, cluster_color, display, format, cluster_pois) {
      var cluster_rule, icon_rule, is_cluster, layer, options;
      if (display == null) {
        display = true;
      }
      if (format == null) {
        format = new OpenLayers.Format.GeoJSON();
      }
      if (cluster_pois == null) {
        cluster_pois = true;
      }
      is_cluster = new OpenLayers.Filter.Comparison({
        type: OpenLayers.Filter.Comparison.GREATER_THAN,
        property: "count",
        value: 1
      });
      icon_rule = new OpenLayers.Rule({
        filter: new OpenLayers.Filter.Logical({
          type: OpenLayers.Filter.Logical.NOT,
          filters: [is_cluster]
        }),
        symbolizer: {
          externalGraphic: icon_url,
          graphicOpacity: 1.0,
          graphicWidth: 32,
          graphicHeight: 37,
          graphicYOffset: -2
        }
      });
      cluster_rule = new OpenLayers.Rule({
        filter: is_cluster,
        symbolizer: {
          fillColor: cluster_color,
          fillOpacity: 0.9,
          strokeColor: cluster_color,
          strokeOpacity: 0.5,
          strokeWidth: 12,
          pointRadius: 10,
          label: "${count}",
          labelOutlineWidth: 1,
          fontColor: "#fff",
          fontOpacity: 0.8,
          fontSize: "12px"
        }
      });
      options = {
        projection: "EPSG:4326",
        protocol: new OpenLayers.Protocol.HTTP({
          url: pois_url,
          "format": format
        }),
        styleMap: new OpenLayers.StyleMap(new OpenLayers.Style(null, {
          rules: [cluster_rule, icon_rule]
        }))
      };
      options.strategies = [new OpenLayers.Strategy.Fixed()];
      if (cluster_pois) {
        options.strategies.push(new OpenLayers.Strategy.Cluster({
          distance: 70,
          threshold: 2,
          animationMethod: OpenLayers.Easing.Expo.easeOut,
          animationDuration: 5
        }));
      }
      layer = new OpenLayers.Layer.Vector(title, options);
      layer.setVisibility(display);
      if (this._poi_select_feature == null) {
        options = {
          autoActivate: true,
          onSelect: (function(_this) {
            return function(feature) {
              _this._poi_select_feature.unselect(feature);
              return _this._markerClick(feature, jQuery("#" + _this.map_div + "_marker_info"));
            };
          })(this)
        };
        this._poi_select_feature = new OpenLayers.Control.SelectFeature([], options);
        this._ol_map.addControl(this._poi_select_feature);
      }
      this._ol_map.addLayer(layer);
      this._poi_layers[poi_type_id] = layer;
      this._poi_select_feature.setLayer(obj_to_arr(this._poi_layers));
      return layer;
    };

    Map.prototype.poisVisibility = function(poi_type_id, display) {
      if (display == null) {
        display = true;
      }
      return this._poi_layers[poi_type_id].setVisibility(display);
    };

    Map.prototype._markerClick = function(feature, modal) {
      var fn, j, len, poi, ref, table_div;
      table_div = modal.find('.markerTable');
      table_div.empty();
      if ((feature.attributes.count != null) && feature.attributes.count > 1) {
        modal.find('.modal-title').text('Sammlung');
        ref = feature.cluster;
        fn = (function(_this) {
          return function(poi) {
            var btn, collapse, id;
            id = "cluster-" + (Math.floor(Math.random() * 10000)) + "-" + (new Date().getTime() % 1000);
            btn = jQuery('<button>', {
              'html': "" + poi.attributes.Name,
              'class': 'btn btn-info btn-block',
              'type': 'button',
              'data-target': "#" + id,
              'data-toggle': 'collapse',
              'style': 'margin-bottom: 10px; margin-top: 10px;'
            });
            collapse = jQuery('<div>', {
              'class': 'collapse no-transition',
              'id': id
            });
            collapse.on('shown.bs.collapse', function() {
              modal.trigger('dialog-resize');
            });
            collapse.on('hidden.bs.collapse', function() {
              modal.trigger('dialog-resize');
            });
            _this._createFeatureTable(collapse, poi);
            table_div.append(btn);
            table_div.append(collapse);
          };
        })(this);
        for (j = 0, len = ref.length; j < len; j++) {
          poi = ref[j];
          fn(poi);
        }
      } else {
        modal.find('.modal-title').html(feature.attributes.Name);
        this._createFeatureTable(table_div, feature);
      }
      modal.modal('show');
      return jQuery.event.trigger({
        type: 'markerClicked',
        "feature": feature,
        "modal": modal
      });
    };

    Map.prototype._createFeatureTable = function(table_div, feature) {
      var html, key, ref, value;
      html = '<table>';
      ref = feature.attributes;
      for (key in ref) {
        value = ref[key];
        if (value !== "") {
          html += "<tr> <th>" + key + "</th> <td>" + value + "</td> </tr>";
        } else {
          html += "<tr><td colspan=\"2\">" + key + "</td></tr>";
        }
      }
      html += '</table>';
      table_div.append(html);
    };

    Map.prototype._addLayerToList = function(layer, list, change_callback) {
      var input, label;
      if (change_callback == null) {
        change_callback = null;
      }
      input = jQuery('<input>', {
        'type': layer.isBaseLayer ? 'radio' : 'checkbox',
        'name': layer.isBaseLayer ? 'baseLayer' : 'secondaryLayer',
        'value': layer.name,
        'id': "check_" + layer.name,
        'checked': layer.getVisibility() ? 'checked' : void 0,
        'data-toggle': layer.isBaseLayer ? 'radio' : 'checkbox'
      }).change((function(_this) {
        return function(e) {
          e.preventDefault();
          if (layer.isBaseLayer) {
            layer.map.setBaseLayer(layer);
          } else {
            layer.setVisibility(!layer.getVisibility());
          }
          if (change_callback != null) {
            change_callback();
          }
        };
      })(this));
      label = jQuery('<label>', {
        'for': "check_" + layer.name,
        'class': layer.isBaseLayer ? 'radio' : 'checkbox'
      });
      label.append(input);
      label.append(layer.name);
      return list.append(label);
    };

    Map.prototype._showMapSettings = function() {
      var j, k, layer, len, len1, list, ref, ref1;
      list = jQuery("#" + this.map_div + "_map_settings_list");
      list.empty();
      jQuery('<strong>', {
        text: 'Karten'
      }).appendTo(list);
      jQuery('<br>').appendTo(list);
      ref = this._ol_map.getLayersBy('isBaseLayer', true);
      for (j = 0, len = ref.length; j < len; j++) {
        layer = ref[j];
        this._addLayerToList(layer, list);
      }
      jQuery('<strong>', {
        text: 'Informationen'
      }).appendTo(list);
      jQuery('<br>').appendTo(list);
      ref1 = this._overlay_layers;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        layer = ref1[k];
        this._addLayerToList(layer, list);
      }
    };

    Map.prototype._showPoisSettings = function() {
      var change_calllback, layer, list, ref, type;
      list = jQuery("#" + this.map_div + "_pois_settings_list");
      list.empty();
      jQuery('<strong>', {
        text: 'Punkte in der Nähe'
      }).appendTo(list);
      change_calllback = (function(_this) {
        return function() {
          var layer, ref, type, types;
          types = [];
          ref = _this._poi_layers;
          for (type in ref) {
            layer = ref[type];
            if (layer.visibility && type > 0) {
              types.push(type);
            }
          }
          return jQuery.event.trigger({
            type: 'typesChanged',
            'types': types
          });
        };
      })(this);
      ref = this._poi_layers;
      for (type in ref) {
        layer = ref[type];
        if (type > 0) {
          this._addLayerToList(layer, list, change_calllback);
        }
      }
    };

    Map.prototype._moveObjRelToViewport = function(obj, posX, posY, width, height) {
      var idealX, idealY;
      idealX = posX + 10 - jQuery("#" + this.map_div).offset().left + jQuery(window).scrollLeft();
      idealY = posY + 10 - jQuery("#" + this.map_div).offset().top + jQuery(window).scrollTop();
      this._moveObjRelToMap(obj, idealX, idealY, width, height);
    };

    Map.prototype._moveObjRelToMap = function(obj, posX, posY, width, height) {
      var max_left, max_top;
      if (width == null) {
        width = obj.outerWidth();
      }
      if (height == null) {
        height = obj.outerHeight();
      }
      max_left = jQuery("#" + this.map_div).width() - width - 10;
      max_top = jQuery("#" + this.map_div).height() - height - 10;
      obj.css('left', Math.min(posX, max_left));
      obj.css('top', Math.min(posY, max_top));
    };

    Map.prototype._moveMap = function(direction, pixels) {
      var lat, lon, mapunits;
      if (pixels == null) {
        pixels = 200;
      }
      lon = this._ol_map.center.lon;
      lat = this._ol_map.center.lat;
      mapunits = 100 * this._ol_map.getResolution();
      switch (direction) {
        case "north":
          lat += mapunits;
          break;
        case "east":
          lon += mapunits;
          break;
        case "south":
          lat -= mapunits;
          break;
        case "west":
          lon -= mapunits;
      }
      return this._ol_map.setCenter(new OpenLayers.LonLat(lon, lat));
    };

    return Map;

  })();

}).call(this);
